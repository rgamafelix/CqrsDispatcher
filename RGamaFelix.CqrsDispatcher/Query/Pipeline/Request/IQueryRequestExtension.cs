namespace RGamaFelix.CqrsDispatcher.Query.Extension.Request;

/// <summary>Represents an extension point for handling query requests in the CQRS dispatcher pipeline.</summary>
/// <typeparam name="TRequest">The type of the query request that this extension is applicable for.</typeparam>
/// <typeparam name="TResponse">The type of the response generated by the query request.</typeparam>
public interface IQueryRequestExtension<TRequest, TResponse> where TRequest : IQueryRequest<TResponse>
{
  /// <summary>
  ///   Gets an optional order value that determines the execution precedence of the extension in the query request
  ///   pipeline. Extensions with lower order values are executed first. A value of <c>null</c> indicates no specific
  ///   precedence is defined.
  /// </summary>
  int? Order { get; }

  /// <summary>
  ///   Handles the processing of a query request in the CQRS dispatcher pipeline. This method is responsible for
  ///   invoking the next stage in the pipeline or performing additional processing, such as validation or transformation,
  ///   before delegating further.
  /// </summary>
  /// <param name="request">The query request to be processed.</param>
  /// <param name="next">
  ///   A delegate representing the next step in the pipeline. It processes the request and returns the
  ///   result.
  /// </param>
  /// <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
  /// <returns>A task representing the asynchronous operation, containing the response generated by the query request.</returns>
  Task<TResponse> Handle(TRequest request, Func<TRequest, CancellationToken, Task<TResponse>> next,
    CancellationToken cancellationToken);

  /// <summary>Determines whether this extension should execute for the given query request.</summary>
  /// <param name="request">The query request to be evaluated.</param>
  /// <returns>A boolean value indicating whether this extension should run for the specified query request.</returns>
  bool ShouldRun(TRequest request);
}
